<div class="card material-table">
    <div class="table-header">
        <span class="table-title">Spots</span>
        <div class="actions">
            <a href="#" id="search-toggle" class="search-toggle waves-effect btn-flat nopadding"><i class="material-icons">search</i></a>
        </div>
    </div>
    <table id="datatable" class="highlight responsive-table">
        <colgroup>
            <!--Add Column Styling Here if Necessary-->
        </colgroup>
        <thead>
            <tr>
                <th>Spot Name</th>
                <th>Spot Hash</th>
                <th>Spot Status</th>
                <th>Firmware Version</th>
                <th>Available Firmware Version</th>
                <th>Created At</th>
            </tr>
        </thead>
        <tbody>
                <%spotsInfo.map(function(spots){%>
                    <tr>
                        <td>
                            <%=spots.spot_name%>
                        </td>
                        <td>
                            <%=spots.secret%>
                        </td>
                        <td>
                            <%=spots.spot_status%>
                        </td>
                        <td>
                            <%= spots.firmware_version %>
                        </td>
                        <td>
                            <a class="btn btn-flat indigo-text white modal-trigger" href="#change_version_modal_spotID<%= spots.id %>"> <%=spots.available_firmware_version%> </a>
                        </td>
                        <td>
                            <%= spots.created_at; %>
                        </td>
                    </tr>
                    <%- include('spotsUpdateCard', {spots, spots}) %>
                    <%});%>
        </tbody>
    </table>
</div>


<link rel='stylesheet' href='/stylesheets/materialTable.css'>
<script>
    /**
     * Go to GET /v0/predictions/:prediction_id
     * @param prediction_id
     */
    function goToPrediction(prediction_id) {
        window.location.href = '/v0/predictions/' + prediction_id;
    }

    (function(window, document, undefined) {
        var factory = function($, DataTable) {
            "use strict";

            $('.search-toggle').click(function() {
                if ($('.hiddensearch').css('display') == 'none')
                    $('.hiddensearch').slideDown();
                else
                    $('.hiddensearch').slideUp();
            });

            /* Set the defaults for DataTables initialisation */
            $.extend(true, DataTable.defaults, {
                dom: "<'hiddensearch'f'>" +
                    "tr" +
                    "<'table-footer'lip'>",
                renderer: 'material',
            });

            /* Default class modification */
            $.extend(DataTable.ext.classes, {
                sWrapper: "dataTables_wrapper",
                sFilterInput: "form-control input-sm",
                sLengthSelect: "form-control input-sm",
            });

            /* Bootstrap paging button renderer */
            DataTable.ext.renderer.pageButton.material = function(settings, host, idx, buttons, page, pages) {
                var api = new DataTable.Api(settings);
                var classes = settings.oClasses;
                var lang = settings.oLanguage.oPaginate;
                var btnDisplay, btnClass, counter = 0;

                var attach = function(container, buttons) {
                    var i, ien, node, button;
                    var clickHandler = function(e) {
                        e.preventDefault();
                        if (!$(e.currentTarget).hasClass('disabled')) {
                            api.page(e.data.action).draw(false);
                        }
                    };

                    for (i = 0, ien = buttons.length; i < ien; i++) {
                        button = buttons[i];

                        if ($.isArray(button)) {
                            attach(container, button);
                        } else {
                            btnDisplay = '';
                            btnClass = '';

                            switch (button) {

                                case 'first':
                                    btnDisplay = lang.sFirst;
                                    btnClass = button + (page > 0 ?
                                        '' : ' disabled');
                                    break;

                                case 'previous':
                                    btnDisplay = '<i class="material-icons">chevron_left</i>';
                                    btnClass = button + (page > 0 ?
                                        '' : ' disabled');
                                    break;

                                case 'next':
                                    btnDisplay = '<i class="material-icons">chevron_right</i>';
                                    btnClass = button + (page < pages - 1 ?
                                        '' : ' disabled');
                                    break;

                                case 'last':
                                    btnDisplay = lang.sLast;
                                    btnClass = button + (page < pages - 1 ?
                                        '' : ' disabled');
                                    break;

                            }

                            if (btnDisplay) {
                                node = $('<li>', {
                                    'class': classes.sPageButton + ' ' + btnClass,
                                    'id': idx === 0 && typeof button === 'string' ?
                                        settings.sTableId + '_' + button : null,
                                })
                                    .append($('<a>', {
                                            'href': '#',
                                            'aria-controls': settings.sTableId,
                                            'data-dt-idx': counter,
                                            'tabindex': settings.iTabIndex,
                                        })
                                            .html(btnDisplay),
                                    )
                                    .appendTo(container);

                                settings.oApi._fnBindAction(
                                    node, {
                                        action: button,
                                    }, clickHandler,
                                );

                                counter++;
                            }
                        }
                    }
                };

                // IE9 throws an 'unknown error' if document.activeElement is used
                // inside an iframe or frame.
                var activeEl;

                try {
                    // Because this approach is destroying and recreating the paging
                    // elements, focus is lost on the select button which is bad for
                    // accessibility. So we want to restore focus once the draw has
                    // completed
                    activeEl = $(document.activeElement).data('dt-idx');
                } catch (e) {}

                attach(
                    $(host).empty().html('<ul class="material-pagination"/>').children('ul'),
                    buttons,
                );

                if (activeEl) {
                    $(host).find('[data-dt-idx=' + activeEl + ']').focus();
                }
            };

            /*
             * TableTools Bootstrap compatibility
             * Required TableTools 2.1+
             */
            if (DataTable.TableTools) {
                // Set the classes that TableTools uses to something suitable for Bootstrap
                $.extend(true, DataTable.TableTools.classes, {
                    "container": "DTTT btn-group",
                    "buttons": {
                        "normal": "btn btn-default",
                        "disabled": "disabled",
                    },
                    "collection": {
                        "container": "DTTT_dropdown dropdown-menu",
                        "buttons": {
                            "normal": "",
                            "disabled": "disabled",
                        },
                    },
                    "print": {
                        "info": "DTTT_print_info",
                    },
                    "select": {
                        "row": "active",
                    },
                });

                // Have the collection use a material compatible drop down
                $.extend(true, DataTable.TableTools.DEFAULTS.oTags, {
                    "collection": {
                        "container": "ul",
                        "button": "li",
                        "liner": "a",
                    },
                });
            }

        }; // /factory

        // Define as an AMD module if possible
        if (typeof define === 'function' && define.amd) {
            define(['jquery', 'datatables'], factory);
        } else if (typeof exports === 'object') {
            // Node/CommonJS
            factory(require('jquery'), require('datatables'));
        } else if (jQuery) {
            // Otherwise simply initialise as normal, stopping multiple evaluation
            factory(jQuery, jQuery.fn.dataTable);
        }

    })(window, document);

    $(document).ready(function() {
        $('#datatable').dataTable({
            "iDisplayLength": 15,
            "order": [],
            "oLanguage": {
                "sStripClasses": "",
                "sSearch": "",
                "sSearchPlaceholder": "Enter Keywords Here",
                "sInfo": "_START_ -_END_ of _TOTAL_",
                "sLengthMenu": '<span>Rows per page:</span><select class="browser-default">' +
                    '<option value="10">10</option>' +
                    '<option value="15">15</option>' +
                    '<option value="20">20</option>' +
                    '<option value="30">30</option>' +
                    '<option value="40">40</option>' +
                    '<option value="50">50</option>' +
                    '<option value="-1">All</option>' +
                    '</select></div>',
            },
            bAutoWidth: false,
        });
        // Initialize the modal
        $('.modal').modal();
    });
    
    $('.change_spot_version_form').submit(function(e) {
        e.preventDefault();
        const form = $(this);
        var data = {};
        $.each(form.serializeArray(), function (i, field) {
            data[field.name] = field.value;
        });
        $.ajax({
            url: '/firmware/spot',
            type: 'PUT',
            data: data,
            success: function(res) {
                window.location.reload();
            },
            error: function(err) {
                const toastHTML = `<div style="top: auto !important; right: auto !important; bottom: 10%; left: 7%;">
                                    <span>${err.responseText}</span>
                                   </div>`;
                M.toast({html: toastHTML});
            }
        });
    })
</script>
